{-# LANGUAGE OverloadedStrings #-}
module Year2019.Day10 where

import Data.Function ((&))
import Data.Text as T (Text, unpack, pack)
import Data.List as L
import Data.List.Index
import Data.List.Split (chunksOf)
import Utils

inputToNumbers i =
  L.map (L.map (\x -> if x == '.' then 0 else 1)) i

matrix input' =
  let lines = inputToNumbers input'
      w = length $ head lines
      h = length lines
  in
      chunksOf w $
      [line !! idx | idx <- [0..(pred h)], line <- lines ]

m1 = matrix exIn1

get m x y = m !! x !! y

cannotSee m x y =
  let range = length $ head m
      above  = [get m x y' | y' <- [0..pred y]]
      below  = [get m x y' | y' <- [succ y..pred range]]
      left  = [get m x' y | x' <- [0..pred x]]
      right  = [get m x' y | x' <- [succ x..pred range]]
  in
    [above, below, left, right]


--(example) input below---------------------------------------------------------


--exIn1 :: [Text]
exIn1 = [".#..#",
         ".....",
         "#####",
         "....#",
         "...##"]

--input :: [Text]
input =
  ["....#.....#.#...##..........#.......#......",
   ".....#...####..##...#......#.........#.....",
   ".#.#...#..........#.....#.##.......#...#..#",
   ".#..#...........#..#..#.#.......####.....#.",
   "##..#.................#...#..........##.##.",
   "#..##.#...#.....##.#..#...#..#..#....#....#",
   "##...#.............#.#..........#...#.....#",
   "#.#..##.#.#..#.#...#.....#.#.............#.",
   "...#..##....#........#.....................",
   "##....###..#.#.......#...#..........#..#..#",
   "....#.#....##...###......#......#...#......",
   ".........#.#.....#..#........#..#..##..#...",
   "....##...#..##...#.....##.#..#....#........",
   "............#....######......##......#...#.",
   "#...........##...#.#......#....#....#......",
   "......#.....#.#....#...##.###.....#...#.#..",
   "..#.....##..........#..........#...........",
   "..#.#..#......#......#.....#...##.......##.",
   ".#..#....##......#.............#...........",
   "..##.#.....#.........#....###.........#..#.",
   "...#....#...#.#.......#...#.#.....#........",
   "...####........#...#....#....#........##..#",
   ".#...........#.................#...#...#..#",
   "#................#......#..#...........#..#",
   "..#.#.......#...........#.#......#.........",
   "....#............#.............#.####.#.#..",
   ".....##....#..#...........###........#...#.",
   ".#.....#...#.#...#..#..........#..#.#......",
   ".#.##...#........#..#...##...#...#...#.#.#.",
   "#.......#...#...###..#....#..#...#.........",
   ".....#...##...#.###.#...##..........##.###.",
   "..#.....#.##..#.....#..#.....#....#....#..#",
   ".....#.....#..............####.#.........#.",
   "..#..#.#..#.....#..........#..#....#....#..",
   "#.....#.#......##.....#...#...#.......#.#..",
   "..##.##...........#..........#.............",
   "...#..##....#...##..##......#........#....#",
   ".....#..........##.#.##..#....##..#........",
   ".#...#...#......#..#.##.....#...#.....##...",
   "...##.#....#...........####.#....#.#....#..",
   "...#....#.#..#.........#.......#..#...##...",
   "...##..............#......#................",
   "........................#....##..#........#"]
